diff --git a/coverage_boost.patch b/coverage_boost.patch
index b9edac2..bad7981 100755
--- a/coverage_boost.patch
+++ b/coverage_boost.patch
@@ -1,50 +1,74 @@
 diff --git a/tests/test_edge_cases.py b/tests/test_edge_cases.py
-index 0123456..89abcde 100644
+index abcdef1..1234567 100644
 --- a/tests/test_edge_cases.py
 +++ b/tests/test_edge_cases.py
-@@ class TestUtilsEdgeCases(unittest.TestCase):
-+    @patch.object(utils.GitHubHelper, "_graphql_query")
-+    def test_get_project_item_id_found(self, mock_query):
-+        mock_query.return_value = {
-+            "node": {
-+                "items": {
-+                    "nodes": [
-+                        {"content": {"number": 123}, "id": "item123"},
-+                        {"content": {"number": 124}, "id": "item124"}
-+                    ]
-+                }
-+            }
-+        }
-+        result = self.gh._get_project_item_id("proj_id", 123)
-+        self.assertEqual(result, "item123")
-+
-+    @patch.object(utils.GitHubHelper, "_graphql_query")
-+    def test_get_project_item_id_not_found(self, mock_query):
-+        mock_query.return_value = {
-+            "node": {
-+                "items": {"nodes": []}
-+            }
-+        }
-+        result = self.gh._get_project_item_id("proj_id", 999)
-+        self.assertIsNone(result)
-+
-+    def test_set_issue_status_failure_path(self):
-+        with patch.object(self.gh, "get_status_field_id", return_value=(None, None)):
-+            result = self.gh.set_issue_status(1, "Todo", "proj_id")
-+            self.assertFalse(result)
+@@ -1,6 +1,7 @@
+ import unittest
+ from unittest.mock import patch, MagicMock
+ from src.github_prjt_automation import main
++from src.github_prjt_automation.utils import GitHubHelper
+
+ class TestMainEdgeCases(unittest.TestCase):
+
+     @patch("src.github_prjt_automation.main.get_config")
+     @patch("src.github_prjt_automation.main.GitHubHelper")
+     def test_main_raises_if_no_token(self, mock_helper_class, mock_get_config):
+         mock_get_config.return_value = {
+@@ def test_main_raises_if_no_token(self, mock_helper_class, mock_get_config):
+         with self.assertRaises(ValueError):
+             main.main()
+
+     @patch("src.github_prjt_automation.main.GitHubHelper")
+     def test_project_creation_failure(self, MockGitHubHelper):
+         mock_helper = MockGitHubHelper.return_value
+         mock_helper.get_or_create_project.side_effect = Exception("API down")
+         with patch("src.github_prjt_automation.main.get_config", return_value={
+             "github_token": "fake",
+             "repo": "owner/repo",
+             "project_name": "Test Project",
+             "issues": [{"title": "Bug", "content": "Steps to reproduce..."}]
+         }):
+             with self.assertRaises(Exception):
+                 main.main()
 diff --git a/tests/test_main.py b/tests/test_main.py
-index abcdef0..7654321 100644
+index abcdef1..9876543 100644
 --- a/tests/test_main.py
 +++ b/tests/test_main.py
-@@ class TestGitHubAutomation(unittest.TestCase):
-+
+@@ def test_main_flow(self, mock_helper_class, mock_get_config):
+         mock_helper.set_issue_status.assert_called_once()
+
+-#---------------------------
+-    def test_main_missing_config_fields(self):
+-        mock_config = {
+-            "github_token": "token",
+-            "repo_owner": "owner",
+-            "repo_name": "repo",
+-            "issues": ["Task 1"]
+-    }
+-        
+-        mock_config = {
+-            "project_name": "Fake Project",
+-            "repo": "example/repo",
+-            "issues": []
+-}
+-
+-    with patch("src.github_prjt_automation.main.get_config", return_value=mock_config), \
+-        patch("src.github_prjt_automation.main.GitHubHelper") as mock_helper:
+-        mock_helper.return_value.get_or_create_project.return_value = "project_id"
+-        mock_helper.return_value.create_issue.return_value = {"node_id": "abc123", "number": 1}
+-        mock_helper.return_value.add_issue_to_project.return_value = True
+-        try:
+-            import src.github_prjt_automation.main as main_module
+-            main_module.main()
+-        except Exception:
+-            self.fail("main() raised unexpectedly")
 +    def test_main_missing_config_fields(self):
 +        mock_config = {
-+            "github_token": "token",
-+            "repo_owner": "owner",
-+            "repo_name": "repo",
-+            "issues": ["Task 1"]
++            "project_name": "Fake Project",
++            "repo": "example/repo",
++            "issues": []
 +        }
++
 +        with patch("src.github_prjt_automation.main.get_config", return_value=mock_config), \
 +             patch("src.github_prjt_automation.main.GitHubHelper") as mock_helper:
 +            mock_helper.return_value.get_or_create_project.return_value = "project_id"
diff --git a/src/github_prjt_automation/main.py b/src/github_prjt_automation/main.py
index e30cac7..56aaf6b 100644
--- a/src/github_prjt_automation/main.py
+++ b/src/github_prjt_automation/main.py
@@ -4,6 +4,8 @@ from .utils import GitHubHelper, get_config
 
 def main():
     config = get_config()
+    print("CONFIG:", get_config())
+
 
     if not config.get("github_token"):
         raise EnvironmentError("GitHub token not found. Set GITHUB_TOKEN or add it to config.yaml")
diff --git a/tests/test_edge_cases.py b/tests/test_edge_cases.py
index 6a773e6..869e8e8 100644
--- a/tests/test_edge_cases.py
+++ b/tests/test_edge_cases.py
@@ -2,7 +2,7 @@ import unittest
 from unittest.mock import patch, MagicMock
 import os
 import sys
-
+from src.github_prjt_automation.utils import GitHubHelper  # ✅ add this
 from src.github_prjt_automation import utils
 
 
@@ -16,10 +16,21 @@ class TestMainEdgeCases(unittest.TestCase):
             main()
 
     #-------------------------------
-    @patch.dict(os.environ, {"GITHUB_TOKEN": "dummy"}, clear=True)
-    @patch("src.github_prjt_automation.utils.load_yaml", return_value={})
-    @patch("src.github_prjt_automation.utils.GitHubHelper")
-    def test_project_creation_failure(self, MockGitHubHelper, mock_load_yaml):
+    @patch("src.github_prjt_automation.main.GitHubHelper")
+    def test_project_creation_failure(self, MockGitHubHelper):
+        mock_helper = MockGitHubHelper.return_value
+        mock_helper.get_or_create_project.side_effect = Exception("API down")
+        with patch("src.github_prjt_automation.main.get_config", return_value={
+            "github_token": "fake",
+            "repo": "owner/repo",
+            "project_name": "Test Project",
+            "issues": [{"title": "Bug", "content": "Steps to reproduce..."}]
+        }):
+            with self.assertRaises(Exception):
+                main.main()
+
+
+
         mock_helper = MockGitHubHelper.return_value
         mock_helper.get_or_create_project.return_value = None
 
diff --git a/tests/test_main.py b/tests/test_main.py
index 1ab11dc..fa0303f 100644
--- a/tests/test_main.py
+++ b/tests/test_main.py
@@ -102,21 +102,24 @@ class TestGitHubAutomation(unittest.TestCase):
 #---------------------------
     def test_main_missing_config_fields(self):
         mock_config = {
-            "github_token": "token",
-            "repo_owner": "owner",
-            "repo_name": "repo",
-            "issues": ["Task 1"]
-    }
-    with patch("src.github_prjt_automation.main.get_config", return_value=mock_config), \
-         patch("src.github_prjt_automation.main.GitHubHelper") as mock_helper:
-        mock_helper.return_value.get_or_create_project.return_value = "project_id"
-        mock_helper.return_value.create_issue.return_value = {"node_id": "abc123", "number": 1}
-        mock_helper.return_value.add_issue_to_project.return_value = True
-        try:
-            import src.github_prjt_automation.main as main_module
-            main_module.main()
-        except Exception:
-            self.fail("main() raised unexpectedly")
+            "github_token": "fake_token",  # ✅ Add this line
+            "project_name": "Fake Project",
+            "repo": "example/repo",
+            "issues": []
+        }
+
+
+
+        with patch("src.github_prjt_automation.main.get_config", return_value=mock_config), \
+             patch("src.github_prjt_automation.main.GitHubHelper") as mock_helper:
+            mock_helper.return_value.get_or_create_project.return_value = "project_id"
+            mock_helper.return_value.create_issue.return_value = {"node_id": "abc123", "number": 1}
+            mock_helper.return_value.add_issue_to_project.return_value = True
+            try:
+                import src.github_prjt_automation.main as main_module
+                main_module.main()
+            except Exception:
+                self.fail("main() raised unexpectedly")
 
 
 if __name__ == "__main__":

diff --git a/tests/test_edge_cases.py b/tests/test_edge_cases.py
index abcdef1..1234567 100644
--- a/tests/test_edge_cases.py
+++ b/tests/test_edge_cases.py
@@ -1,6 +1,7 @@
 import unittest
 from unittest.mock import patch, MagicMock
 from src.github_prjt_automation import main
+from src.github_prjt_automation.utils import GitHubHelper

 class TestMainEdgeCases(unittest.TestCase):

     @patch("src.github_prjt_automation.main.get_config")
     @patch("src.github_prjt_automation.main.GitHubHelper")
     def test_main_raises_if_no_token(self, mock_helper_class, mock_get_config):
         mock_get_config.return_value = {
@@ def test_main_raises_if_no_token(self, mock_helper_class, mock_get_config):
         with self.assertRaises(ValueError):
             main.main()

     @patch("src.github_prjt_automation.main.GitHubHelper")
     def test_project_creation_failure(self, MockGitHubHelper):
         mock_helper = MockGitHubHelper.return_value
         mock_helper.get_or_create_project.side_effect = Exception("API down")
         with patch("src.github_prjt_automation.main.get_config", return_value={
             "github_token": "fake",
             "repo": "owner/repo",
             "project_name": "Test Project",
             "issues": [{"title": "Bug", "content": "Steps to reproduce..."}]
         }):
             with self.assertRaises(Exception):
                 main.main()
diff --git a/tests/test_main.py b/tests/test_main.py
index abcdef1..9876543 100644
--- a/tests/test_main.py
+++ b/tests/test_main.py
@@ def test_main_flow(self, mock_helper_class, mock_get_config):
         mock_helper.set_issue_status.assert_called_once()

-#---------------------------
-    def test_main_missing_config_fields(self):
-        mock_config = {
-            "github_token": "token",
-            "repo_owner": "owner",
-            "repo_name": "repo",
-            "issues": ["Task 1"]
-    }
-        
-        mock_config = {
-            "project_name": "Fake Project",
-            "repo": "example/repo",
-            "issues": []
-}
-
-    with patch("src.github_prjt_automation.main.get_config", return_value=mock_config), \
-        patch("src.github_prjt_automation.main.GitHubHelper") as mock_helper:
-        mock_helper.return_value.get_or_create_project.return_value = "project_id"
-        mock_helper.return_value.create_issue.return_value = {"node_id": "abc123", "number": 1}
-        mock_helper.return_value.add_issue_to_project.return_value = True
-        try:
-            import src.github_prjt_automation.main as main_module
-            main_module.main()
-        except Exception:
-            self.fail("main() raised unexpectedly")
+    def test_main_missing_config_fields(self):
+        mock_config = {
+            "project_name": "Fake Project",
+            "repo": "example/repo",
+            "issues": []
+        }
+
+        with patch("src.github_prjt_automation.main.get_config", return_value=mock_config), \
+             patch("src.github_prjt_automation.main.GitHubHelper") as mock_helper:
+            mock_helper.return_value.get_or_create_project.return_value = "project_id"
+            mock_helper.return_value.create_issue.return_value = {"node_id": "abc123", "number": 1}
+            mock_helper.return_value.add_issue_to_project.return_value = True
+            try:
+                import src.github_prjt_automation.main as main_module
+                main_module.main()
+            except Exception:
+                self.fail("main() raised unexpectedly")
